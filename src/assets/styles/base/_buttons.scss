@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "variables" as *;
@use "functions" as *;
@use "mediaqueries" as *;
@use "typography" as *;

// Button Configuration
$button-config: (
	base: (
		font-size: 22px,
		font-weight: 500,
		font-family: $font-family-title,
		padding-vertical: to-vw(10),
		padding-horizontal: to-vw(20),
		border-radius: 50px,
		hover-radius: 50px,
		line-height: 1em,
		letter-spacing: -0.01em,
		gap: 1em,
		z-index: 1,
	),
	transitions: (
		default: 0.3s ease-in-out,
		delayed: 0.3s ease-in-out 0.15s,
		bg-delayed: 0.2s ease-in-out 0.4s,
	),
);

// Reusable transitions
%button-transitions {
	transition: opacity map.get(map.get($button-config, transitions), default), color map.get(map.get($button-config, transitions), default),
		background-color map.get(map.get($button-config, transitions), default), border-color map.get(map.get($button-config, transitions), default),
		border-radius map.get(map.get($button-config, transitions), default);
}

// Base button styles
%button-base {
	display: flex;
	align-items: stretch;
	width: fit-content;
	position: relative;
	white-space: nowrap;
	cursor: pointer;
	overflow: hidden;
	line-height: 1em;
	font-weight: 400;
	letter-spacing: -0.015em;
}

// Pseudo-element base
%pseudo-element-base {
	content: "";
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	display: block;
	transition: all map.get(map.get($button-config, transitions), default);
	z-index: -1;
}

@mixin button(
	$color: $white,
	$hover_color: $navy,
	$bg: $navy,
	$hover_bg: $white,
	$border: $navy,
	$hover_border: $navy,
	$bg_gradient: null,
	$hover_bg_gradient: null,
	$ff: $font-family-title,
	$fw: 500,
	$pv: null,
	$ph: null,
	$br: null,
	$bw: null,
	$fs: null,
	$tt: uppercase,
	$fs_min: 12,
	$fs_max: 22,
	$relative_fs: true
) {
	@extend %button-base;
	@extend %button-transitions;

	$base: map.get($button-config, base);

	@if $relative_fs {
		@if ($fs == null) {
			$fs: map.get($base, font-size);
		}
		$fs: to-vw($fs);
	}
	@if $fs != null {
		$fs: clamp(#{$fs_min}px, #{$fs}, #{$fs_max}px);
	}

	padding: if($pv, $pv, map.get($base, padding-vertical)) if($ph, $ph, map.get($base, padding-horizontal));
	font-size: if($fs, $fs, map.get($base, font-size));
	font-weight: if($fw, $fw, map.get($base, font-weight));
	font-family: if($ff, $ff, map.get($base, font-family));
	line-height: map.get($base, line-height);
	text-transform: if($tt, $tt, map.get($base, text-transform));
	letter-spacing: map.get($base, letter-spacing);
	gap: map.get($base, gap);
	color: $color;
	background: if($bg_gradient, $bg_gradient, $bg);
	border-radius: if($br, $br, map.get($base, border-radius));
	border: if($bw, $bw, 1px solid $border);
	z-index: map.get($base, z-index);
	opacity: 1;
	display: flex;
	align-items: center;
	justify-content: center;

	// Child elements
	> * {
		position: relative;
		z-index: 2;
	}

	// Span styles
	span {
		display: flex;
		align-items: center;
		justify-content: flex-start;
		transition: transform map.get(map.get($button-config, transitions), default);
		@if ($relative_fs) {
			height: clamp(10px, to-vw(12), 20px);
			@media all and (max-width: 1024px) {
				height: 12px;
			}
		} @else {
			height: 12px;
		}
		svg {
			height: 100%;
			width: auto;
		}

		path {
			stroke: $color;
			transition: stroke map.get(map.get($button-config, transitions), default);
		}
	}

	.link-text {
		gap: 0.35em;
		color: $color;
		@extend %button-base;
		display: flex;
		align-items: center;
		justify-content: flex-start;
		transition: transform map.get(map.get($button-config, transitions), default);
		height: fit-content;
	}

	// Pseudo-elements
	&::before {
		@extend %pseudo-element-base;
		background: if($hover_bg_gradient, $hover_bg_gradient, $hover_bg);
		border-radius: 10px;
		transform: translateX(-101%);
	}

	&::after {
		@extend %pseudo-element-base;
		background: if($bg_gradient, $bg_gradient, $bg);
		border-radius: 10px;
		transform: translateX(0) scale(1);
	}

	// States
	&[disabled] {
		background-color: if($bg_gradient, $bg_gradient, $bg);
		color: $color;
		opacity: 0.2;
		cursor: not-allowed;
		pointer-events: none;
	}

	@include desktop-only {
		&:hover {
			color: $hover_color;
			border-radius: map.get($base, hover-radius);
			border: if($bw, $bw, 1px solid $hover_border);
			background-color: transparent;
			opacity: 1;

			&::before {
				transform: translateX(0) scale(1);
			}
			&::after {
				transform: translateX(101%) scale(1);
			}

			span {
				path {
					stroke: $hover_color;
					transition: stroke map.get(map.get($button-config, transitions), delayed);
				}

				&.icon-arrow-left {
					path {
						transition: stroke map.get(map.get($button-config, transitions), default);
					}
				}
			}
		}
	}

	// Open state
	&--open {
		color: $hover_color;
		border: 1px solid $black;
		background-color: $black;

		&::before {
			transform: translateX(0) scale(1);
		}
		&::after {
			transform: translateX(101%) scale(1);
		}

		span {
			transform: rotate(135deg) scale(1.2) !important;

			path {
				fill: $hover_color;
				transition: fill map.get(map.get($button-config, transitions), delayed);
			}
		}

		&:hover {
			span {
				transform: translateX(0.25em);
			}
		}
	}
}

// Default button styles
.button {
	@include button($white, $navy, $navy, $white, $navy, $navy, null, null);
}

// Reset button
button {
	background: none;
	border: none;
	padding: 0;
	font: inherit;
	color: inherit;
	cursor: pointer;
	outline: none;
	appearance: none;
}
